/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/Rigged_Hand.glb
*/

import React, { useRef } from 'react'
import { useGLTF, OrbitControls } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

const getAngle = (p1, p2, c1, m) => {
  return (Math.atan2(p2[1] - p1[1], p2[0] - p1[0]) + c1) * m;
}


const a = 100000
export default function HandModel(props) {
  let kp
  const group = useRef()
  const { nodes, materials } = useGLTF('/Rigged_Hand.glb')
  console.log(nodes.Hand.skeleton);
  console.log(props.getJoints());
  useFrame((state, delta) => {
    kp = props.getJoints()
    // console.log(kp);
    if (kp !== undefined) {

      nodes.Hand.skeleton.bones[0].position.x = kp[0][0] / a
      nodes.Hand.skeleton.bones[0].position.y = kp[0][1] / a
      nodes.Hand.skeleton.bones[0].position.z = kp[0][2] / a

      // thumb
      nodes.Hand.skeleton.bones[1].rotation.x = getAngle(
        kp[1],
        kp[2],
        Math.PI / 3, 1
      )
      nodes.Hand.skeleton.bones[2].rotation.x = getAngle(
        kp[2],
        kp[3],
        Math.PI, 1
      )
      nodes.Hand.skeleton.bones[3].rotation.x = getAngle(
        kp[3],
        kp[4],
        Math.PI, 1
      )

      // index
      nodes.Hand.skeleton.bones[4].rotation.x = getAngle(
        kp[0],
        kp[5],
        Math.PI / 2, 1
      )
      nodes.Hand.skeleton.bones[5].rotation.z = getAngle(
        kp[5],
        kp[6],
        Math.PI / 2, -1
      )

      nodes.Hand.skeleton.bones[6].rotation.z = getAngle(
        kp[6],
        kp[7],
        Math.PI / 2, -1
      )
      nodes.Hand.skeleton.bones[7].rotation.z = getAngle(
        kp[7],
        kp[8],
        Math.PI / 2, -1
      )

      // middle
      nodes.Hand.skeleton.bones[8].rotation.x = getAngle(
        kp[0],
        kp[9],
        Math.PI / 2, 1
      )
      nodes.Hand.skeleton.bones[9].rotation.z = getAngle(
        kp[9],
        kp[10],
        Math.PI / 2, -1
      )
      nodes.Hand.skeleton.bones[10].rotation.z = getAngle(
        kp[10],
        kp[11],
        Math.PI / 2, -1
      )
      nodes.Hand.skeleton.bones[11].rotation.z = getAngle(
        kp[11],
        kp[12],
        Math.PI / 2, -1
      )

      //ring
      nodes.Hand.skeleton.bones[12].rotation.x = getAngle(
        kp[0],
        kp[13],
        Math.PI / 2, 1
      )
      nodes.Hand.skeleton.bones[13].rotation.z = getAngle(
        kp[13],
        kp[14],
        Math.PI / 2, -1
      )
      nodes.Hand.skeleton.bones[14].rotation.z = getAngle(
        kp[14],
        kp[15],
        Math.PI / 2, -1
      )
      nodes.Hand.skeleton.bones[15].rotation.z = getAngle(
        kp[15],
        kp[16],
        Math.PI / 2, -1
      )

      // pinky
      nodes.Hand.skeleton.bones[16].rotation.x = getAngle(
        kp[0],
        kp[17],
        Math.PI / 2, 1
      )
      nodes.Hand.skeleton.bones[17].rotation.z = getAngle(
        kp[17],
        kp[18],
        Math.PI / 2, -1
      )
      nodes.Hand.skeleton.bones[18].rotation.z = getAngle(
        kp[18],
        kp[19],
        Math.PI / 2, -1
      )
      nodes.Hand.skeleton.bones[19].rotation.z = getAngle(
        kp[19],
        kp[20],
        Math.PI / 2, -1
      )


    }
  })

  return (
    <>
      <OrbitControls />
      <directionalLight position={[1, 2, 3]} />
      <directionalLight position={[1, 2, -3]} />

      <ambientLight intensity={0.4} />

      <group ref={group}>
        <group name="Armature" position={[0, -1, 0]} rotation={[Math.PI / 2, Math.PI, Math.PI / 2]} scale={70}>
          <primitive object={nodes.HandMain} />
        </group>
        <skinnedMesh name="Hand" geometry={nodes.Hand.geometry} material={materials.DefaultMaterial} skeleton={nodes.Hand.skeleton} position={[0, 0, 0]} scale={380} />
      </group>

    </>

  )
}

useGLTF.preload('/Rigged_Hand.glb')
